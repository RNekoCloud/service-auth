// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/proto/auth.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (AuthService_SignUpClient, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (AuthService_SignInClient, error)
	TestMessage(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (AuthService_TestMessageClient, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (AuthService_SignUpClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[0], "/proto.AuthService/SignUp", opts...)
	if err != nil {
		return nil, err
	}
	x := &authServiceSignUpClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuthService_SignUpClient interface {
	Recv() (*SignUpResponse, error)
	grpc.ClientStream
}

type authServiceSignUpClient struct {
	grpc.ClientStream
}

func (x *authServiceSignUpClient) Recv() (*SignUpResponse, error) {
	m := new(SignUpResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (AuthService_SignInClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[1], "/proto.AuthService/SignIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &authServiceSignInClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuthService_SignInClient interface {
	Recv() (*SignInResponse, error)
	grpc.ClientStream
}

type authServiceSignInClient struct {
	grpc.ClientStream
}

func (x *authServiceSignInClient) Recv() (*SignInResponse, error) {
	m := new(SignInResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authServiceClient) TestMessage(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (AuthService_TestMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[2], "/proto.AuthService/TestMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &authServiceTestMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuthService_TestMessageClient interface {
	Recv() (*TestResponse, error)
	grpc.ClientStream
}

type authServiceTestMessageClient struct {
	grpc.ClientStream
}

func (x *authServiceTestMessageClient) Recv() (*TestResponse, error) {
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	SignUp(*SignUpRequest, AuthService_SignUpServer) error
	SignIn(*SignInRequest, AuthService_SignInServer) error
	TestMessage(*TestRequest, AuthService_TestMessageServer) error
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) SignUp(*SignUpRequest, AuthService_SignUpServer) error {
	return status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedAuthServiceServer) SignIn(*SignInRequest, AuthService_SignInServer) error {
	return status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedAuthServiceServer) TestMessage(*TestRequest, AuthService_TestMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method TestMessage not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_SignUp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SignUpRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServiceServer).SignUp(m, &authServiceSignUpServer{stream})
}

type AuthService_SignUpServer interface {
	Send(*SignUpResponse) error
	grpc.ServerStream
}

type authServiceSignUpServer struct {
	grpc.ServerStream
}

func (x *authServiceSignUpServer) Send(m *SignUpResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AuthService_SignIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SignInRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServiceServer).SignIn(m, &authServiceSignInServer{stream})
}

type AuthService_SignInServer interface {
	Send(*SignInResponse) error
	grpc.ServerStream
}

type authServiceSignInServer struct {
	grpc.ServerStream
}

func (x *authServiceSignInServer) Send(m *SignInResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AuthService_TestMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServiceServer).TestMessage(m, &authServiceTestMessageServer{stream})
}

type AuthService_TestMessageServer interface {
	Send(*TestResponse) error
	grpc.ServerStream
}

type authServiceTestMessageServer struct {
	grpc.ServerStream
}

func (x *authServiceTestMessageServer) Send(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SignUp",
			Handler:       _AuthService_SignUp_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SignIn",
			Handler:       _AuthService_SignIn_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TestMessage",
			Handler:       _AuthService_TestMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/proto/auth.proto",
}
